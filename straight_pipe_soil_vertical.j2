#python:

import gprMax.input_cmd_funcs as gprmax_cmds

gprmax_cmds.command("title", "{{ params.simulation_name }}")
gprmax_cmds.command("pml_cells", "{{ params.pml_command }}")

gprmax_cmds.domain(
    x = {{ params.domain_x }},
    y = {{ params.domain_y }},
    z = {{ params.domain_z }}
)

gprmax_cmds.dx_dy_dz(
    x = {{ params.delta_d }},
    y = {{ params.delta_d }},
    z = {{ params.delta_d }}
)

gprmax_cmds.time_window({{ params.simulation_runtime }})

gprmax_cmds.material(
    permittivity = {{ params.pipe_material_er }},
    conductivity = {{ params.pipe_material_conductivity }},
    permeability = 1,
    magconductivity = 0,
    name = 'pipe_material'
)

gprmax_cmds.material(
    permittivity = {{ params.soil_er }},
    conductivity = {{ params.soil_conductivity }},
    permeability = 1,
    magconductivity = 0,
    name = 'soil_material'
)

{% if params.include_water %}
gprmax_cmds.material(
    permittivity = {{ params.sw_er }},
    conductivity = {{ params.sw_conductivity }},
    permeability = 1,
    magconductivity = 0,
    name = 'water_fill'
)
{% endif %}

soil = gprmax_cmds.box(
    xs = 0,
    ys = 0,
    zs = 0,
    xf = {{ params.domain_x }},
    yf = {{ params.domain_y }},
    zf = {{ params.domain_z }},
    material = 'soil_material',
    averaging = 'y'
)

pipe_shell = gprmax_cmds.cylinder(
    x1 = {{ params.pipe_start.x }},
    y1 = {{ params.pipe_start.y }},
    z1 = {{ params.pipe_start.z }},
    x2 = {{ params.pipe_end.x }},
    y2 = {{ params.pipe_end.y }},
    z2 = {{ params.pipe_end.z }},
    radius = {{ params.pipe_diameter / 2 + params.pipe_wall_thickness }},
    material = 'pipe_material',
    averaging = 'y'
)

pipe_inside = gprmax_cmds.cylinder(
    x1 = {{ params.pipe_start.x }},
    y1 = {{ params.pipe_start.y }},
    z1 = {{ params.pipe_start.z }},
    x2 = {{ params.pipe_end.x }},
    y2 = {{ params.pipe_end.y }},
    z2 = {{ params.pipe_end.z }},
    radius = {{ params.pipe_diameter / 2 }},
    material = 'free_space',
    averaging = 'y'
)

{% if params.include_water and params.geometry_mode == '2D' %}
pipe_water_fill = gprmax_cmds.box(
    xs = {{ params.pipe_start.x }},
    ys = {{ params.pipe_start.y - params.pipe_diameter / 2 }},
    zs = 0,
    xf = {{ params.pipe_end.x }},
    yf = {{ params.pipe_end.y - params.pipe_diameter / 2 + params.fill_depth }},
    zf = {{ params.delta_d }},
    material = 'water_fill',
    averaging = 'y'
)
{% endif %}

{% if params.include_water and params.geometry_mode == '3D' %}
gprmax_cmds.cylindrical_sector(
    axis = 'x',
    ctr1 = {{ params.pipe_start.y }},
    ctr2 = {{ params.pipe_start.z }},
    t1 = {{ params.pipe_start.x }},
    t2 = {{ params.pipe_end.x }},
    radius = {{ params.pipe_diameter / 2 }},
    startingangle = {{ 180 - params.central_angle_deg / 2 }},
    sweptangle = {{ params.central_angle_deg }},
    material = 'water_fill',
    averaging = 'y'
)

pipe_refill_air = gprmax_cmds.triangle(
    x1 = {{ params.pipe_start.x }},
    y1 = {{ params.pipe_start.y }},
    z1 = {{ params.pipe_start.z }},
    x2 = {{ params.pipe_start.x }},
    y2 = {{ params.pipe_start.y - params.pipe_diameter }} / 2 * np.cos({{ params.central_angle }} / 2),
    z2 = {{ params.pipe_start.z - params.pipe_diameter }} / 2 * np.sin({{ params.central_angle }} / 2),
    x3 = {{ params.pipe_start.x }},
    y3 = {{ params.pipe_start.y - params.pipe_diameter }} / 2 * np.cos({{ params.central_angle }} / 2),
    z3 = {{ params.pipe_start.z + params.pipe_diameter }} / 2 * np.sin({{ params.central_angle }} / 2),
    thickness = {{ params.domain_x }},
    material = 'free_space',
    averaging = 'y'
)
{% endif %}

air_above = gprmax_cmds.box(
    xs = 0,
    ys = {{ params.domain_y - params.pml_y - params.air_depth }},
    zs = 0,
    xf = {{ params.domain_x }},
    yf = {{ params.domain_y }},
    zf = {{ params.domain_z }},
    material = 'free_space',
    averaging = 'y'
)

pulse_excitation = gprmax_cmds.waveform(
    shape = "{{ params.waveform_type }}",
    amplitude = {{ params.waveform_amplitude }},
    frequency = {{ params.fund_freq }},
    identifier = "{{ params.waveform_identifier }}"
)

transmitter = gprmax_cmds.hertzian_dipole(
    polarisation = "{{ params.dipole_polarisation }}",
    f1 = {{ params.transmitter_position.x }},
    f2 = {{ params.transmitter_position.y }},
    f3 = {{ params.transmitter_position.z }},
    identifier = pulse_excitation
)

receiver = gprmax_cmds.rx(
    x = {{ params.receiver_position.x }},
    y = {{ params.receiver_position.y }},
    z = {{ params.receiver_position.z }}
)

obsv_rx_1 = gprmax_cmds.rx(
    x = {{ params.observer_rx_1.x }},
    y = {{ params.observer_rx_1.y }},
    z = {{ params.observer_rx_1.z }}
)

obsv_rx_2 = gprmax_cmds.rx(
    x = {{ params.observer_rx_2.x }},
    y = {{ params.observer_rx_2.y }},
    z = {{ params.observer_rx_2.z }}
)

{% if params.output_geometry %}
gprmax_cmds.geometry_view(
    xs = 0,
    ys = 0,
    zs = {{ params.pipe_start.y - (params.pipe_diameter / 2 + params.pipe_wall_thickness + 0.25) }},
    xf = {{ params.domain_x }},
    yf = {{ params.domain_y }},
    zf = {{ params.pipe_start.y + (params.pipe_diameter / 2 + params.pipe_wall_thickness + 0.25) }},
    dx = {{ params.delta_d }},
    dy = {{ params.delta_d }},
    dz = {{ params.delta_d }},
    filename = "{{ params.geometry_filename }}",
    type = 'n'
)
{% endif %}

{% if params.output_snapshots %}
for number in range({{ params.snapshots_count }}):
    gprmax_cmds.snapshot(
        xs = 0,
        ys = 0,
        zs = {{ params.pipe_start.y - (params.pipe_diameter / 2 + params.pipe_wall_thickness + 0.25) }},
        xf = {{ params.domain_x }},
        yf = {{ params.domain_y }},
        zf = {{ params.pipe_start.y + (params.pipe_diameter / 2 + params.pipe_wall_thickness + 0.25) }},
        dx = {{ params.delta_d }},
        dy = {{ params.delta_d }},
        dz = {{ params.delta_d }},
        time = ((number + 1) * ({{ params.simulation_runtime }} / {{ params.snapshots_count }})),
        filename = "_".join(["{{ params.snapshot_filename }}", str(number)])
    )
{% endif %}

#end_python: